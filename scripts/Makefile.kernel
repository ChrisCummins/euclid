#
#		The kernel build Makefile
#
# This Makefile defines targets and variables which are specific to the task of
# building the kernel only. This file is included from the top Makefile and does
# not need to be accessed directly.

ARCHDIR  := arch/$(ARCH)

# Where to place the final build
K_TARGET := $(ARCHDIR)/boot/image

# A list of kernel defines
k_defines =				\
		__ARCH_$(ARCH)__      	\
		DEBUG			\
		$(NULL)

# Kernel include directories
k_includes =				\
		$(ARCHDIR)/include	\
		$(ARCHDIR)/include/lib 	\
		include			\
		include/lib		\
		$(NULL)

# Enabled compiler warnings
k_warnings =				\
		aggregate-return	\
		bad-function-cast	\
		cast-align		\
		cast-qual		\
		float-equal		\
		frame-larger-than=128	\
		inline			\
		jump-misses-init	\
		larger-than=2048	\
		logical-op		\
		missing-prototypes	\
		nested-externs		\
		no-div-by-zero		\
		no-main			\
		no-unused-parameter	\
		old-style-definition	\
		padded			\
		redundant-decls		\
		stack-usage=128		\
		strict-prototypes	\
		write-strings		\
		$(NULL)

k_define_flags  = $(patsubst %,-D%,$(k_defines))
k_include_flags = $(patsubst %,-I%,$(k_includes))
k_warning_flags = $(patsubst %,-W%,$(k_warnings))

# Kernel compiler switches. These specify additional switches in
# addition to the globally assigned switches (CFLAGS, EXTRA_CFLAGS etc).
K_ASFLAGS :=	$(ASFLAGS)		\
		$(NULL)

K_CFLAGS := 				\
		$(CFLAGS)		\
		$(k_define_flags)	\
		$(k_include_flags)	\
		$(k_warning_flags)	\
		-fno-builtin 		\
		-fno-stack-protector	\
		-g			\
		-nostdinc		\
		-nostdlib		\
		-O0			\
		$(NULL)

K_LDFLAGS :=	$(LDFLAGS)		\
		$(NULL)

EXTRA_K_ASFLAGS := $(EXTRA_ASFLAGS)
EXTRA_K_CFLAGS  := $(EXTRA_CFLAGS)
EXTRA_K_LDFLAGS := $(EXTRA_LDFLAGS)

# Top level kernel directories
k_dirs = 				\
		arch/			\
		Documentation/		\
		fs/			\
		include/		\
		init/			\
		kernel/			\
		lib/			\
		mm/			\
		scripts/		\
		tools/			\
		$(NULL)

# Get the kernel source files from the directories defined in k_dirs
k_c_sources      := $(shell find $(k_dirs) -name '*.c' 2>/dev/null)
k_asm_sources    := $(shell find $(k_dirs) -name '*.s' 2>/dev/null)
k_sources        := $(k_asm_sources) $(k_c_sources)
k_headers        := $(shell find $(k_dirs) -name '*.h' 2>/dev/null)
k_objects        := $(patsubst %.s,%.o,$(k_asm_sources)) $(patsubst %.c,%.o,$(k_c_sources))
k_generated_docs := $(shell find Documentation/html Documentation/man Documentation/latex 2>/dev/null)

# Clean files
CLEAN_FILES     +=			\
		$(k_objects) 		\
		$(k_generated_docs)	\
		$(K_TARGET) 		\
		$(NULL)

MRPROPER_FILES  +=

DISTCLEAN_FILES +=

# Check for a valid architecture or fail
ifeq "$(wildcard $(ARCHDIR) )" ""
  $(error target architecture '$(ARCH)' does not exist)
endif

# Load the Makefile specific to our target architecture
include arch/$(ARCH)/Makefile.$(ARCH)

# Generate database for the cscope tool
tools/cscope/cscope.files: $(k_sources) $(k_headers)
	$(QUIET)find $(PWD)						\
		-path './arch/*' ! -path './$(ARCHDIR)*' -prune -o 	\
		-type d \( 						\
			-path "./.git" -o 				\
			-path "./Documentation" -o 			\
			-path "./scripts" -o 				\
			-path "./tools"					\
		\) -prune -o -name '*.[chsS]' -print > $@

cscope: tools/cscope/cscope.files
	@echo '  CSCOPE   tools/cscope/cscope.files'
	$(QUIET)cd tools/cscope && $(CSCOPE) -b -q -k

# Don't use the make built in targets
%.o: %.c $(k_headers)
	@echo '  CC       $<'
	$(QUIET)$(CC) $(K_CFLAGS) $(EXTRA_K_CFLAGS) -c -o $@ $<

%.o: %.s $(k_headers)
	@echo '  AS       $<'
	$(QUIET)$(AS) $(K_ASFLAGS) $(EXTRA_K_ASFLAGS) -o $@ $<

Documentation/html/index.html: $(k_sources) $(k_headers)
	$(QUIET)$(DOXYGEN) scripts/doxygenrc

$(K_TARGET): $(k_objects)
	@echo '  LD       $@'
	$(QUIET)$(LD) $(K_LDFLAGS) $(EXTRA_K_LDFLAGS) -o $(K_TARGET) $(k_objects)

# The main kernel build targets to be called from the top Makefile
k_build: k_build_arch $(K_TARGET)

k_docs: Documentation/html/index.html
